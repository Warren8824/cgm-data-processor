name: Tests & Coverage

# Trigger the workflow on pushes or pull requests to specific branches
on:
  push:
    branches: [ add-tests, main ]    # runs when commits are pushed to these branches
  pull_request:
    branches: [ add-tests, main ]    # runs when PR targets these branches

jobs:
  test:
    runs-on: ubuntu-latest          # GitHub runner environment

    steps:
    # Step 1: Checkout the code from the branch being tested
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Python on the runner
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'      # matches your local Python version

    # Step 3: Install dependencies with Poetry, including dev packages
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev    # dev dependencies include pre-commit, pytest, pytest-cov, codecov

    # Step 4: Install pre-commit hooks in CI environment
    - name: Install pre-commit
      run: pip install pre-commit

    # Step 5: Run all pre-commit hooks to enforce code quality
    - name: Run pre-commit
      run: pre-commit run --all-files

    # Step 6: Run tests with coverage reporting
    - name: Run tests
      run: |
        poetry run pytest --cov=src --cov-report=xml --cov-report=html tests/

    # Step 7: Upload coverage report to Codecov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage.xml          # XML file generated by pytest-cov
        flags: unittests            # optional label for coverage metrics
        fail_ci_if_error: true      # ensures workflow fails if upload fails
